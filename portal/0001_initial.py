# Generated by Django 5.2.6 on 2025-09-10 13:26

import django.core.validators
import django.db.models.deletion
import multiselectfield.db.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChildInHouseholdTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('child_declared_in_cover', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Yes if the child is already listed in the cover; No otherwise.', verbose_name="Is the child among those declared in the cover as the farmer's child?")),
                ('child_identifier', models.PositiveSmallIntegerField(help_text="Enter the number attached to the child's name in the cover (must be less than 20).", validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(19)], verbose_name='Child identifier')),
                ('child_can_be_surveyed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Answer Yes if the child is available for survey; No otherwise.', verbose_name='Can the child be surveyed now?')),
                ('child_unavailability_reason', models.CharField(blank=True, choices=[('school', 'The child is at school'), ('work_cocoa', 'The child has gone to work on the cocoa farm'), ('housework', 'Child is busy doing housework'), ('work_outside', 'Child works outside the household'), ('too_young', 'The child is too young'), ('sick', 'The child is sick'), ('travelled', 'The child has travelled'), ('play', 'The child has gone out to play'), ('sleeping', 'The child is sleeping'), ('other', 'Other reasons')], help_text='Select the reason if the child cannot be surveyed.', max_length=20, verbose_name='Reason for child not being surveyed')),
                ('child_not_avail', models.CharField(blank=True, help_text='Provide reasons in capital letters. (Minimum length can be validated separately.)', max_length=200, verbose_name='Other reasons (in capital letters) for child not being available')),
                ('who_answers_child_unavailable', models.CharField(blank=True, choices=[('parents', 'The parents or legal guardians'), ('family_member', 'Another family member'), ('sibling', "One of the child's siblings"), ('other', 'Other')], max_length=20, verbose_name='Who is answering for the child (if not available)')),
                ('who_answers_child_unavailable_other', models.CharField(blank=True, max_length=100, verbose_name='Specify who is answering (if Other is selected)')),
                ('child_first_name', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='This field must contain only letters and spaces.', regex='^[A-Za-z\\s]+$')], verbose_name="Child's First Name")),
                ('child_surname', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='This field must contain only letters and spaces.', regex='^[A-Za-z\\s]+$')], verbose_name="Child's Surname")),
                ('child_gender', models.CharField(choices=[('Boy', 'Boy'), ('Girl', 'Girl')], max_length=4, verbose_name='Gender of the Child')),
                ('child_year_birth', models.IntegerField(help_text='The year must be between 2007 and 2020 (child must be between 5 and 17 years old).', validators=[django.core.validators.MinValueValidator(2007), django.core.validators.MaxValueValidator(2020)], verbose_name='Year of Birth of the Child')),
                ('child_birth_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the child have a birth certificate?')),
                ('child_birth_certificate_reason', models.CharField(blank=True, help_text='Provide a reason if the child does not have a birth certificate.', max_length=200, verbose_name='If no, please specify why')),
                ('child_born_in_community', models.CharField(choices=[('Yes', 'Yes'), ('DiffComm', 'No, born in this district but different community'), ('DiffDist', 'No, born in this region but different district'), ('DiffReg', 'No, born in another region of Ghana'), ('AnotherCountry', 'No, born in another country')], help_text='Select an option.', max_length=20, verbose_name='Is the child born in this community?')),
                ('child_country_of_birth', models.CharField(blank=True, choices=[('Benin', 'Benin'), ('BurkinaFaso', 'Burkina Faso'), ('IvoryCoast', 'Ivory Coast'), ('Mali', 'Mali'), ('Niger', 'Niger'), ('Togo', 'Togo'), ('Other', 'Other')], help_text="Provide this only if 'No, born in another country' is selected.", max_length=20, verbose_name='In which country is the child born?')),
                ('child_country_of_birth_other', models.CharField(blank=True, help_text='Use capital letters without special characters.', max_length=100, validators=[django.core.validators.RegexValidator(message='Only capital letters, numbers, and spaces are allowed.', regex='^[A-Z0-9\\s]+$')], verbose_name='Specify country of birth (if Other)')),
                ('child_relationship_to_head', models.CharField(choices=[('Son/Daughter', 'Son/Daughter'), ('Brother/Sister', 'Brother/Sister'), ('SonInLaw/DaughterInLaw', 'Son-in-law/Daughter-in-law'), ('Grandson/Granddaughter', 'Grandson/Granddaughter'), ('Niece/Nephew', 'Niece/nephew'), ('Cousin', 'Cousin'), ('ChildOfWorker', 'Child of the worker'), ('ChildOfOwner', 'Child of the farm owner'), ('Other', 'Other')], max_length=50, verbose_name='Relationship of the child to the head of the household')),
                ('child_relationship_to_head_other', models.CharField(blank=True, help_text='Write in capital letters without special characters.', max_length=100, validators=[django.core.validators.RegexValidator(message='Only capital letters, numbers, and spaces are allowed.', regex='^[A-Z0-9\\s]+$')], verbose_name='Specify relationship (if Other)')),
                ('child_not_live_with_family_reason', models.CharField(blank=True, choices=[('ParentsDeceased', 'Parents deceased'), ('CantCare', "Can't take care of me"), ('Abandoned', 'Abandoned'), ('SchoolReasons', 'School reasons'), ('AgencyBrought', 'A recruitment agency brought me here'), ('DidNotWant', 'I did not want to live with my parents'), ('Other', 'Other')], max_length=50, verbose_name='Why does the child not live with his/her family?')),
                ('child_not_live_with_family_reason_other', models.CharField(blank=True, max_length=200, verbose_name='Other reason (if Other is selected)')),
                ('child_decision_maker', models.CharField(choices=[('Myself', 'Myself'), ('Parents', 'Father/Mother'), ('Grandparents', 'Grandparents'), ('OtherFamily', 'Other family members'), ('External', 'External recruiter/agency'), ('Other', 'Other person')], max_length=30, verbose_name='Who decided that the child comes into the household?')),
                ('child_decision_maker_other', models.CharField(blank=True, max_length=100, verbose_name='Specify decision maker (if Other is selected)')),
                ('child_agree_with_decision', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Did the child agree with this decision?')),
                ('child_seen_parents', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has the child seen and/or spoken with his/her parents in the past year?')),
                ('child_last_seen_parent', models.CharField(choices=[('1week', 'Max 1 week'), ('1month', 'Max 1 month'), ('1year', 'Max 1 year'), ('MoreThan1year', 'More than 1 year'), ('Never', 'Never')], max_length=20, verbose_name='When was the last time the child saw/talked with a parent?')),
                ('child_living_duration', models.CharField(choices=[('Born', 'Born in the household'), ('Less1', 'Less than 1 year'), ('1-2', '1-2 years'), ('2-4', '2-4 years'), ('4-6', '4-6 years'), ('6-8', '6-8 years'), ('More8', 'More than 8 years'), ('DontKnow', "Don't know")], max_length=20, verbose_name='For how long has the child been living in the household?')),
                ('child_accompanied_by', models.CharField(choices=[('Alone', 'Came alone'), ('Parents', 'Father/Mother'), ('Grandparents', 'Grandparents'), ('OtherFamily', 'Other family member'), ('WithRecruit', 'With a recruit'), ('Other', 'Other')], max_length=20, verbose_name='Who accompanied the child to come here?')),
                ('child_accompanied_by_other', models.CharField(blank=True, max_length=100, verbose_name='Specify accompaniment (if Other is selected)')),
                ('child_father_location', models.CharField(blank=True, choices=[('same_household', 'In the same household'), ('another_household_village', 'In another household in the same village'), ('another_household_region', 'In another household in the same region'), ('another_household_other_region', 'In another household in another region'), ('abroad', 'Abroad'), ('parents_deceased', 'Parents deceased'), ('dont_know', "Don't know/Don't want to answer")], help_text="Where does the child's father live?", max_length=50, null=True)),
                ('child_father_country', models.CharField(blank=True, choices=[('Benin', 'Benin'), ('Burkina Faso', 'Burkina Faso'), ('Ghana', 'Ghana'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Liberia', 'Liberia'), ('Mauritania', 'Mauritania'), ('Mali', 'Mali'), ('Nigeria', 'Nigeria'), ('Niger', 'Niger'), ('Senegal', 'Senegal'), ('Sierra Leone', 'Sierra Leone'), ('Togo', 'Togo'), ('dont_know', "Don't know"), ('other', 'Other')], help_text="Father's country of residence.", max_length=50, null=True)),
                ('child_father_country_other', models.CharField(blank=True, help_text="If 'Other' is selected, specify the country (in capital letters).", max_length=100, null=True)),
                ('child_mother_location', models.CharField(blank=True, choices=[('same_household', 'In the same household'), ('another_household_village', 'In another household in the same village'), ('another_household_region', 'In another household in the same region'), ('another_household_other_region', 'In another household in another region'), ('abroad', 'Abroad'), ('parents_deceased', 'Parents deceased'), ('dont_know', "Don't know/Don't want to answer")], help_text="Where does the child's mother live?", max_length=50, null=True)),
                ('child_mother_country', models.CharField(blank=True, choices=[('Benin', 'Benin'), ('Burkina Faso', 'Burkina Faso'), ('Ghana', 'Ghana'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Liberia', 'Liberia'), ('Mauritania', 'Mauritania'), ('Mali', 'Mali'), ('Nigeria', 'Nigeria'), ('Niger', 'Niger'), ('Senegal', 'Senegal'), ('Sierra Leone', 'Sierra Leone'), ('Togo', 'Togo'), ('dont_know', "Don't know"), ('other', 'Other')], help_text="Mother's country of residence.", max_length=50, null=True)),
                ('child_mother_country_other', models.CharField(blank=True, help_text="If 'Other' is selected, specify the country (in capital letters).", max_length=100, null=True)),
                ('child_educated', models.IntegerField(choices=[(1, 'Yes'), (0, 'No')], help_text='Is the child currently enrolled in school? (1 = Yes, 0 = No)')),
                ('child_school_name', models.CharField(blank=True, help_text='Name of the school (if enrolled).', max_length=200, null=True)),
                ('school_type', models.CharField(blank=True, choices=[('public', 'Public'), ('private', 'Private')], help_text='Is the school public or private?', max_length=20, null=True)),
                ('child_grade', models.CharField(blank=True, choices=[('K1', 'Kindergarten 1'), ('K2', 'Kindergarten 2'), ('P1', 'Primary 1'), ('P2', 'Primary 2'), ('P3', 'Primary 3'), ('P4', 'Primary 4'), ('P5', 'Primary 5'), ('P6', 'Primary 6'), ('JHS1', 'JHS/JSS 1'), ('JHS2', 'JHS/JSS 2'), ('JHS3', 'JHS/JSS 3'), ('SSS1', 'SSS/JHS 1'), ('SSS2', 'SSS/JHS 2'), ('SSS3', 'SSS/JHS 3'), ('SSS4', 'SSS/JHS 4')], help_text='What grade is the child enrolled in?', max_length=10, null=True)),
                ('sch_going_times', models.IntegerField(blank=True, choices=[('01', 'Once'), ('02', 'Twice'), ('03', 'Thrice'), ('04', 'Four times'), ('05', 'Five times')], help_text='How many times does the child go to school in a week?', null=True)),
                ('basic_need_available', models.CharField(blank=True, help_text='Comma-separated basic needs available (e.g., books, bag, pen, uniform, shoes, none).', max_length=100, null=True)),
                ('child_schl2', models.IntegerField(blank=True, choices=[('01', 'Yes, they went to school but stopped'), ('00', 'No, they have never been to school')], help_text='Has the child ever been to school (if not currently enrolled)?', null=True)),
                ('child_schl_left_age', models.IntegerField(blank=True, help_text='Which year did the child leave school? (Or the age at which they left)', null=True)),
                ('calculation_response', models.CharField(choices=[('both_correct', 'Yes, the child gave the right answer for both calculations'), ('one_correct', 'Yes, the child gave the right answer for one calculation'), ('wrong', 'No, the child does not know how to answer and gave wrong answers'), ('refused', 'The child refuses to try')], help_text='Response to the calculation task.', max_length=20)),
                ('reading_response', models.CharField(choices=[('can_read', 'Yes (he/she can read the sentences)'), ('simple_text', 'Only the simple text (text 1.)'), ('cannot_read', 'No'), ('refused', 'The child refuses to try')], help_text='Response to the reading task.', max_length=20)),
                ('writing_response', models.CharField(choices=[('can_write_both', 'Yes, he/she can write both sentences'), ('simple_text', 'Only the simple text (text 1.)'), ('cannot_write', 'No'), ('refused', 'The child refuses to try')], help_text='Response to the writing task.', max_length=20)),
                ('education_level', models.CharField(choices=[('pre_school', 'Pre-school (Kindergarten)'), ('primary', 'Primary'), ('jss', 'JSS/Middle school'), ('sss', "SSS/'O'-level/'A'-level (including vocational & technical training)"), ('university', 'University or higher'), ('not_applicable', 'Not applicable')], help_text='What is the education level of the child?', max_length=30)),
                ('child_schl_left_why', models.CharField(blank=True, choices=[('too_far', 'The school is too far away'), ('tuition', 'Tuition fees for private school too high'), ('poor_performance', 'Poor academic performance'), ('insecurity', 'Insecurity in the area'), ('learn_trade', 'To learn a trade'), ('early_pregnancy', 'Early pregnancy'), ('child_disinterest', 'The child did not want to go to school anymore'), ('affordability', "Parents can't afford Teaching and Learning Materials"), ('other', 'Other'), ('dont_know', 'Does not know')], help_text='What is the main reason for the child leaving school?', max_length=20, null=True)),
                ('child_schl_left_why_other', models.CharField(blank=True, help_text="Specify the reason if 'Other' is selected.", max_length=200, null=True)),
                ('child_why_no_school', models.CharField(blank=True, choices=[('too_far', 'The school is too far away'), ('tuition', 'Tuition fees too high'), ('too_young', 'Too young to be in school'), ('insecurity', 'Insecurity in the region'), ('learn_trade', 'To learn a trade (apprenticeship)'), ('child_disinterest', "The child doesn't want to go to school"), ('affordability', "Parents can't afford TLMs and/or enrollment fees"), ('other', 'Other')], help_text='Why has the child never been to school?', max_length=20, null=True)),
                ('child_why_no_school_other', models.CharField(blank=True, help_text="Specify the reason if 'Other' is selected.", max_length=200, null=True)),
                ('child_school_7days', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No')], help_text='Has the child been to school in the past 7 days?', max_length=3, null=True)),
                ('child_school_absence_reason', models.CharField(blank=True, choices=[('holidays', 'It was the holidays'), ('sick', 'He/she was sick'), ('working', 'He/she was working'), ('traveling', 'He/she was traveling'), ('other', 'Other')], help_text='If not, why has the child not been to school?', max_length=20, null=True)),
                ('child_school_absence_reason_other', models.CharField(blank=True, help_text="Specify the reason if 'Other' is selected.", max_length=200, null=True)),
                ('missed_school', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text='Has the child missed school days in the past 7 days? (Mandatory if basic_need_available is not null)', max_length=3)),
                ('missed_school_reason', models.CharField(blank=True, choices=[('sick', 'He/she was sick'), ('working', 'He/she was working'), ('traveled', 'He/she traveled'), ('other', 'Other')], help_text="Why did the child miss school? (Only applicable if missed_school is 'yes')", max_length=20, null=True)),
                ('missed_school_reason_other', models.CharField(blank=True, help_text="If 'Other' is selected for why the child missed school, please specify.", max_length=200, null=True)),
                ('work_in_house', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text='In the past 7 days, has the child worked in the house? (Mandatory if child_educated is not null)', max_length=3)),
                ('work_on_cocoa', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text='In the past 7 days, has the child been working on the cocoa farm? (Mandatory if child_work_house is not null)', max_length=3)),
                ('work_frequency', models.CharField(blank=True, choices=[('every_day', 'Every day'), ('4-5_days', '4-5 days'), ('2-3_days', '2-3 days'), ('once', 'Once')], help_text="How often has the child worked in the past 7 days? (Mandatory if work_in_house or work_on_cocoa is 'yes')", max_length=10, null=True)),
                ('observed_work', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No')], help_text="Did the enumerator observe the child working in a real situation? (Only applicable if work_in_house is 'yes')", max_length=3, null=True)),
                ('performed_tasks', multiselectfield.db.fields.MultiSelectField(choices=[('collect_fruits', 'Collect and gather fruits, pods, seeds after harvesting'), ('extract_cocoa', 'Extracting cocoa beans after shelling by an adult'), ('wash_items', 'Wash beans, fruits, vegetables or tubers'), ('prepare_germinators', 'Prepare the germinators and pour the seeds into the germinators'), ('collect_firewood', 'Collecting firewood'), ('measure_distance', 'To help measure distances between plants during transplanting'), ('sort_drying', 'Sort and spread the beans, cereals and other vegetables for drying'), ('put_cuttings', 'Putting cuttings on the mounds'), ('hold_bags', 'Holding bags or filling them with small containers for packaging de produits agricoles'), ('cover_products', 'Covering stored agricultural products with tarps'), ('shell_dehusk', 'To shell or dehusk seeds, plants and fruits by hand'), ('sowing', 'Sowing seeds'), ('transplant', 'Transplant or put in the ground the cuttings or plants'), ('harvest_legumes', 'Harvesting legumes, fruits and other leafy products (corn, beans, soybeans, various vegetables)'), ('none', 'None')], help_text='Select tasks performed in the last 7 days', max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='districtTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('district', models.CharField(blank=True, max_length=250, null=True)),
                ('district_code', models.CharField(blank=True, max_length=250, null=True, unique=True)),
            ],
            options={
                'verbose_name_plural': 'District',
            },
        ),
        migrations.CreateModel(
            name='farmerTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('first_name', models.CharField(blank=True, max_length=250, null=True)),
                ('last_name', models.CharField(blank=True, max_length=250, null=True)),
                ('farmer_code', models.CharField(blank=True, max_length=250, null=True, unique=True)),
                ('national_id_no', models.CharField(blank=True, max_length=250, null=True)),
                ('contact', models.CharField(blank=True, max_length=250, null=True)),
                ('id_type', models.CharField(blank=True, max_length=250, null=True)),
                ('id_expiry_date', models.CharField(blank=True, max_length=250, null=True)),
                ('no_of_cocoa_farms', models.IntegerField(blank=True, max_length=250, null=True)),
                ('no_of_certified_crop', models.IntegerField(blank=True, max_length=250, null=True)),
                ('total_cocoa_bags_harvested_previous_year', models.IntegerField(blank=True, max_length=250, null=True)),
                ('total_cocoa_bags_sold_group_previous_year', models.IntegerField(blank=True, max_length=250, null=True)),
                ('current_year_yeild_estimate', models.IntegerField(blank=True, max_length=250, null=True)),
                ('uuid', models.CharField(blank=True, max_length=2500, null=True)),
                ('farmer_photo', models.ImageField(blank=True, null=True, upload_to='staff')),
                ('cal_no_mapped_farms', models.IntegerField(default=0, max_length=250)),
                ('mapped_status', models.CharField(default='No', max_length=2500)),
                ('new_farmer_code', models.CharField(blank=True, max_length=250, null=True, unique=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Farmers Details',
            },
        ),
        migrations.CreateModel(
            name='heavyTaskTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='lightTaskTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='regionTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('region', models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                'verbose_name_plural': 'Region',
            },
        ),
        migrations.CreateModel(
            name='districtStaffTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('districtTbl_foreignkey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.districttbl')),
            ],
            options={
                'verbose_name_plural': 'Staff District Assignments',
            },
        ),
        migrations.CreateModel(
            name='childHeavyTaskTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('salary_received', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text='Has the child received a salary for this task?', max_length=3)),
                ('task_location', models.CharField(choices=[('family_farm', 'On family farm'), ('hired_labour', 'As a hired labourer on another farm'), ('school_farms', 'School farms/compounds'), ('teachers_farms', 'Teachers farms (during communal labour)'), ('church_farms', 'Church farms or cleaning activities'), ('community_help', 'Helping a community member for free'), ('other', 'Other')], help_text='Where was this task done?', max_length=20)),
                ('task_location_other', models.CharField(blank=True, help_text="If 'Other' is selected, please specify.", max_length=200, null=True)),
                ('heavy_tasks_12months', models.CharField(blank=True, help_text='Which of the following tasks has the child performed in the last 12 months on the cocoa farm? If multiple tasks apply, list the keys separated by commas.', max_length=500)),
                ('salary_received_12', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text='Has the child received a salary for this task?', max_length=3)),
                ('task_location_12', models.CharField(choices=[('family_farm', 'On family farm'), ('hired_labour', 'As a hired labourer on another farm'), ('school_farms', 'School farms/compounds'), ('teachers_farms', 'Teachers farms (during communal labour)'), ('church_farms', 'Church farms or cleaning activities'), ('community_help', 'Helping a community member for free'), ('other', 'Other')], help_text='Where was this task done?', max_length=20)),
                ('task_location_other_12', models.CharField(blank=True, help_text="If 'Other' is selected, please specify.", max_length=200, null=True)),
                ('longest_time_school_day', models.CharField(choices=[('<1', 'Less than one hour'), ('1', '1 hour'), ('2', '2 hours'), ('3-4', '3-4 hours'), ('4-6', '4-6 hours'), ('6-8', '6-8 hours'), ('>8', 'More than 8 hours'), ('na', 'Does not apply')], help_text='Longest time spent on the task during a SCHOOL DAY in the last 7 days.', max_length=10)),
                ('longest_time_non_school_day', models.CharField(choices=[('<1', 'Less than one hour'), ('1-2', '1-2 hour'), ('2-3', '2-3 hours'), ('3-4', '3-4 hours'), ('4-6', '4-6 hours'), ('6-8', '6-8 hours'), ('>8', 'More than 8 hours')], help_text='Longest time spent on the task during a NON-SCHOOL DAY in the last 7 days.', max_length=10)),
                ('total_hours_school_days', models.IntegerField(help_text='How many hours has the child worked on during SCHOOL DAYS in the last 7 days? (0-1015)')),
                ('total_hours_non_school_days', models.IntegerField(help_text='How many hours has the child been working on during NON-SCHOOL DAYS in the last 7 days? (0-1015)')),
                ('under_supervision', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Was the child under supervision of an adult when performing this task?', max_length=3)),
                ('child_work_who', models.CharField(choices=[('parents', 'For his/her parents'), ('family_not_parents', 'For family, not parents'), ('family_friends', 'For family friends'), ('other', 'Other')], help_text='For whom does the child work?', max_length=20)),
                ('child_work_who_other', models.CharField(blank=True, help_text="If 'Other' is selected, please specify.", max_length=200, null=True)),
                ('child_work_why', models.CharField(choices=[('own_money', 'To have his/her own money'), ('increase_income', 'To increase household income'), ('cannot_afford_adult', "Household cannot afford adult's work"), ('cannot_find_adult', 'Household cannot find adult labor'), ('learn_cocoa', 'To learn cocoa farming'), ('other', 'Other'), ('does_not_know', 'Does not know')], help_text='Why does the child work?', max_length=20)),
                ('child_work_why_other', models.CharField(blank=True, help_text="If 'Other' is selected for why the child works, please specify (in capital letters).", max_length=200, null=True)),
                ('agrochemicals_applied', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Has the child ever applied or sprayed agrochemicals on the farm?', max_length=3)),
                ('child_on_farm_during_agro', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Was the child on the farm during the application of agrochemicals?', max_length=3)),
                ('suffered_injury', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Recently, has the child suffered any injury?', max_length=3)),
                ('wound_cause', models.CharField(blank=True, choices=[('playing_outside', 'Playing outside'), ('household_chores', 'Doing household chores'), ('helping_farm', 'Helping on the farm'), ('falling_bicycle', 'Falling of a bicycle, scooters or tricycle'), ('animal_insect', 'Animal or insect bite or scratch'), ('fighting', 'Fighting with someone else'), ('other', 'Other')], help_text='How did the child get wounded? (If injured)', max_length=30, null=True)),
                ('wound_cause_other', models.CharField(blank=True, help_text="If 'Other' is selected, please specify.", max_length=200, null=True)),
                ('wound_time', models.CharField(blank=True, choices=[('<week', 'Less than a week ago'), ('1week-1month', 'More than one week and less than a month'), ('2-6months', 'More than 2 months and less than 6 months'), ('>6months', 'More than 6 months')], help_text='When was the child wounded? (If injured)', max_length=20, null=True)),
                ('child_often_pains', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Does the child often feel pains or aches?', max_length=3)),
                ('help_child_health', models.CharField(blank=True, help_text='What help did the child receive to get better? (Select all that apply, separated by commas)', max_length=200, null=True)),
                ('help_child_health_other', models.CharField(blank=True, help_text="If 'Other' is selected above, please specify.", max_length=200, null=True)),
                ('child_photo', models.ImageField(blank=True, help_text='Upload a photo of the child (if available).', null=True, upload_to='child_photos/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.childinhouseholdtbl')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.heavytasktbl')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='childHeavyTask12MonthsTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('salary_received', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text='Has the child received a salary for this task?', max_length=3)),
                ('task_location', models.CharField(choices=[('family_farm', 'On family farm'), ('hired_labour', 'As a hired labourer on another farm'), ('school_farms', 'School farms/compounds'), ('teachers_farms', 'Teachers farms (during communal labour)'), ('church_farms', 'Church farms or cleaning activities'), ('community_help', 'Helping a community member for free'), ('other', 'Other')], help_text='Where was this task done?', max_length=20)),
                ('task_location_other', models.CharField(blank=True, help_text="If 'Other' is selected, please specify.", max_length=200, null=True)),
                ('heavy_tasks_12months', models.CharField(blank=True, help_text='Which of the following tasks has the child performed in the last 12 months on the cocoa farm? If multiple tasks apply, list the keys separated by commas.', max_length=500)),
                ('salary_received_12', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text='Has the child received a salary for this task?', max_length=3)),
                ('task_location_12', models.CharField(choices=[('family_farm', 'On family farm'), ('hired_labour', 'As a hired labourer on another farm'), ('school_farms', 'School farms/compounds'), ('teachers_farms', 'Teachers farms (during communal labour)'), ('church_farms', 'Church farms or cleaning activities'), ('community_help', 'Helping a community member for free'), ('other', 'Other')], help_text='Where was this task done?', max_length=20)),
                ('task_location_other_12', models.CharField(blank=True, help_text="If 'Other' is selected, please specify.", max_length=200, null=True)),
                ('longest_time_school_day', models.CharField(choices=[('<1', 'Less than one hour'), ('1', '1 hour'), ('2', '2 hours'), ('3-4', '3-4 hours'), ('4-6', '4-6 hours'), ('6-8', '6-8 hours'), ('>8', 'More than 8 hours'), ('na', 'Does not apply')], help_text='Longest time spent on the task during a SCHOOL DAY in the last 7 days.', max_length=10)),
                ('longest_time_non_school_day', models.CharField(choices=[('<1', 'Less than one hour'), ('1-2', '1-2 hour'), ('2-3', '2-3 hours'), ('3-4', '3-4 hours'), ('4-6', '4-6 hours'), ('6-8', '6-8 hours'), ('>8', 'More than 8 hours')], help_text='Longest time spent on the task during a NON-SCHOOL DAY in the last 7 days.', max_length=10)),
                ('total_hours_school_days', models.IntegerField(help_text='How many hours has the child worked on during SCHOOL DAYS in the last 7 days? (0-1015)')),
                ('total_hours_non_school_days', models.IntegerField(help_text='How many hours has the child been working on during NON-SCHOOL DAYS in the last 7 days? (0-1015)')),
                ('under_supervision', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Was the child under supervision of an adult when performing this task?', max_length=3)),
                ('child_work_who', models.CharField(choices=[('parents', 'For his/her parents'), ('family_not_parents', 'For family, not parents'), ('family_friends', 'For family friends'), ('other', 'Other')], help_text='For whom does the child work?', max_length=20)),
                ('child_work_who_other', models.CharField(blank=True, help_text="If 'Other' is selected, please specify.", max_length=200, null=True)),
                ('child_work_why', models.CharField(choices=[('own_money', 'To have his/her own money'), ('increase_income', 'To increase household income'), ('cannot_afford_adult', "Household cannot afford adult's work"), ('cannot_find_adult', 'Household cannot find adult labor'), ('learn_cocoa', 'To learn cocoa farming'), ('other', 'Other'), ('does_not_know', 'Does not know')], help_text='Why does the child work?', max_length=20)),
                ('child_work_why_other', models.CharField(blank=True, help_text="If 'Other' is selected for why the child works, please specify (in capital letters).", max_length=200, null=True)),
                ('agrochemicals_applied', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Has the child ever applied or sprayed agrochemicals on the farm?', max_length=3)),
                ('child_on_farm_during_agro', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Was the child on the farm during the application of agrochemicals?', max_length=3)),
                ('suffered_injury', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Recently, has the child suffered any injury?', max_length=3)),
                ('wound_cause', models.CharField(blank=True, choices=[('playing_outside', 'Playing outside'), ('household_chores', 'Doing household chores'), ('helping_farm', 'Helping on the farm'), ('falling_bicycle', 'Falling of a bicycle, scooters or tricycle'), ('animal_insect', 'Animal or insect bite or scratch'), ('fighting', 'Fighting with someone else'), ('other', 'Other')], help_text='How did the child get wounded? (If injured)', max_length=30, null=True)),
                ('wound_cause_other', models.CharField(blank=True, help_text="If 'Other' is selected, please specify.", max_length=200, null=True)),
                ('wound_time', models.CharField(blank=True, choices=[('<week', 'Less than a week ago'), ('1week-1month', 'More than one week and less than a month'), ('2-6months', 'More than 2 months and less than 6 months'), ('>6months', 'More than 6 months')], help_text='When was the child wounded? (If injured)', max_length=20, null=True)),
                ('child_often_pains', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Does the child often feel pains or aches?', max_length=3)),
                ('help_child_health', models.CharField(blank=True, help_text='What help did the child receive to get better? (Select all that apply, separated by commas)', max_length=200, null=True)),
                ('help_child_health_other', models.CharField(blank=True, help_text="If 'Other' is selected above, please specify.", max_length=200, null=True)),
                ('child_photo', models.ImageField(blank=True, help_text='Upload a photo of the child (if available).', null=True, upload_to='child_photos/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.childinhouseholdtbl')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.heavytasktbl')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='houseHoldTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('interview_start_time', models.DateTimeField(blank=True, null=True, verbose_name='Interview Start/Pick-up Time')),
                ('gps_point', models.CharField(blank=True, max_length=100, null=True, verbose_name='GPS Point of the Household')),
                ('community_type', models.CharField(blank=True, choices=[('Town', 'Town'), ('Village', 'Village'), ('Camp', 'Camp')], max_length=20, null=True, verbose_name='Type of Community')),
                ('farmer_resides_in_community', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Does the farmer reside in the community stated on the cover?', verbose_name='Does the farmer reside in the community stated on the cover?')),
                ('farmer_residing_community', models.CharField(blank=True, help_text='If the farmer does NOT reside in the cover community, provide the community name here.', max_length=100, validators=[django.core.validators.RegexValidator(message='Community name must be in capital letters without any special characters.', regex='^[A-Z0-9]+$')])),
                ('farmer_available', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], null=True, verbose_name='Is the farmer available?')),
                ('reason_unavailable', models.CharField(blank=True, choices=[('Non-resident', 'Non-resident'), ('Deceased', 'Deceased'), ("Doesn't work with TOUTON anymore", "Doesn't work with TOUTON anymore"), ('Other', 'Other')], help_text='If the farmer is not available, select the reason.', max_length=50)),
                ('reason_unavailable_other', models.CharField(blank=True, help_text='If the farmer is not available, provide the reason here.', max_length=100)),
                ('available_answer_by', models.CharField(blank=True, choices=[('Caretaker', 'Caretaker'), ('Spouse', 'Spouse'), ('Nobody', 'Nobody')], help_text='Who is available to answer for the farmer?', max_length=20)),
                ('refusal_toa_participate_reason_survey', models.CharField(blank=True, help_text='If the farmer refused to participate, provide the reason here.', max_length=500)),
                ('total_adults', models.PositiveIntegerField(help_text='Household means people that dwell under the same roof and share the same meal.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Total number of adults in the household (producer/manager/owner not included)')),
                ('is_name_correct', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No', please fill in the exact name and surname of the producer.", verbose_name='Is the name of the respondent correct?')),
                ('exact_name', models.CharField(blank=True, help_text='Exact name and surname of the producer (if respondent name is incorrect).', max_length=200, validators=[django.core.validators.RegexValidator(message='Only numbers, letters, spaces and apostrophes are allowed. Accents are not allowed.', regex="^[0-9A-Za-z\\'\\s]+$")])),
                ('nationality', models.CharField(choices=[('Ghanaian', 'Ghanaian'), ('Non Ghanaian', 'Non Ghanaian')], max_length=20, verbose_name='Nationality of the respondent')),
                ('country_origin', models.CharField(blank=True, choices=[('Burkina Faso', 'Burkina Faso'), ('Mali', 'Mali'), ('Guinea', 'Guinea'), ('Ivory Coast', 'Ivory Coast'), ('Liberia', 'Liberia'), ('Togo', 'Togo'), ('Benin', 'Benin'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Other', 'Other')], help_text='If Non Ghanaian, select the country of origin.', max_length=50)),
                ('country_origin_other', models.CharField(blank=True, help_text="If 'Other' is selected, please specify the country of origin.", max_length=100)),
                ('is_owner', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No', please fill in the farm's name and details.", verbose_name='Is the respondent the owner of the farm?')),
                ('owner_status_01', models.CharField(blank=True, choices=[('Coaretaker/Manager of the farm', 'Coaretaker/Manager of the farm'), ('Sharecropper', 'Sharecropper')], help_text='Which of these best describes you?', max_length=30)),
                ('owner_status_00', models.CharField(blank=True, choices=[('Coaretaker/Manager of the farm', 'Coaretaker/Manager of the farm'), ('Sharecropper', 'Sharecropper')], help_text='Which of these best describes you?', max_length=30)),
                ('children_present', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Answer Yes if there are children, No otherwise.', verbose_name="Are there children living in the respondent's household?")),
                ('num_children_5_to_17', models.PositiveSmallIntegerField(help_text="Count the producer's children as well as other children living in the household (cannot be negative or exceed 19).", validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(19)], verbose_name='Number of children between ages 5 and 17')),
                ('feedback_enum', models.TextField(help_text='Feedback from enumerator. This field is required.')),
                ('signature_producer', models.ImageField(blank=True, help_text='Signature of the producer. Required if farmer_available is True.', null=True, upload_to='producer_signatures/')),
                ('end_gps', models.CharField(blank=True, help_text='End GPS coordinates of the survey. Required if sp6_code, farmer_code, and client are set.', max_length=100, null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='End time of the survey. Required if sp6_code, farmer_code, and client are set.', null=True)),
                ('sensitized_good_parenting', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Have you sensitized the household members on Good Parenting? (This is mandatory.)', max_length=3)),
                ('sensitized_child_protection', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Have you sensitized the household members on Child Protection? (This is mandatory.)', max_length=3)),
                ('sensitized_safe_labour', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Have you sensitized the household members on Safe Labour Practices? (This is mandatory.)', max_length=3)),
                ('number_of_female_adults', models.PositiveIntegerField(help_text='How many female adults were present during the sensitization? (Must be at least 1.)', validators=[django.core.validators.MinValueValidator(1)])),
                ('number_of_male_adults', models.PositiveIntegerField(help_text='How many male adults were present during the sensitization? (Must be at least 1.)', validators=[django.core.validators.MinValueValidator(1)])),
                ('picture_of_respondent', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Can you take a picture of the respondent and yourself?', max_length=3)),
                ('picture_sensitization', models.ImageField(blank=True, help_text='Please take a picture of the sensitization being implemented with the family and the child.', null=True, upload_to='sensitization/')),
                ('feedback_observations', models.TextField(blank=True, help_text='What are your observations regarding the reaction from the parents on the sensitization provided?', null=True)),
                ('school_fees_owed', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text='Do you owe fees for the school of the children living in your household?', max_length=3)),
                ('parent_remediation', models.CharField(choices=[('child_protection', 'Child protection and parenting education'), ('school_kits', 'School kits support'), ('iga_support', 'IGA support'), ('other', 'Other')], help_text='What should be done for the parent to stop involving their children in child labour?', max_length=20)),
                ('parent_remediation_other', models.CharField(blank=True, help_text="If 'Other' is selected, specify in capital letters.", max_length=200, null=True)),
                ('community_remediation', models.CharField(choices=[('community_education', 'Community education on child labour'), ('school_building', 'Community school building'), ('school_renovation', 'Community school renovation'), ('other', 'Other')], help_text='What can be done for the community to stop involving the children in child labour?', max_length=30)),
                ('community_remediation_other', models.CharField(blank=True, help_text="If 'Other' is selected, specify in capital letters.", max_length=200, null=True)),
                ('name_owner', models.CharField(blank=True, help_text="Enter the owner's surname. Letters and apostrophes only (no spaces or accents).", max_length=100, validators=[django.core.validators.RegexValidator(message='This field must contain only letters and apostrophes (no spaces or accents).', regex="^[A-Za-z\\']+$")], verbose_name="Owner's Last Name")),
                ('first_name_owner', models.CharField(blank=True, help_text="Enter the owner's first name. Letters and apostrophes only (no spaces or accents).", max_length=100, validators=[django.core.validators.RegexValidator(message='This field must contain only letters and apostrophes (no spaces or accents).', regex="^[A-Za-z\\']+$")], verbose_name="Owner's First Name")),
                ('nationality_owner', models.CharField(choices=[('Ghanaian', 'Ghanaian'), ('Non Ghanaian', 'Non Ghanaian')], max_length=20, verbose_name='What is the nationality of the owner?')),
                ('country_origin_owner', models.CharField(blank=True, choices=[('Burkina Faso', 'Burkina Faso'), ('Mali', 'Mali'), ('Guinea', 'Guinea'), ('Ivory Coast', 'Ivory Coast'), ('Liberia', 'Liberia'), ('Togo', 'Togo'), ('Benin', 'Benin'), ('Other', 'Other')], help_text='If the owner is Non Ghanaian, select the country of origin.', max_length=200, verbose_name='Country of origin of the owner')),
                ('country_origin_owner_other', models.CharField(blank=True, help_text="If 'Other' is selected above, please specify the country.", max_length=100, verbose_name='Specify country of origin (if Other)')),
                ('manager_work_length', models.IntegerField(verbose_name='For how many years has the respondent been working for the owner?')),
                ('recruited_workers', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Yes or No', verbose_name='Have you recruited at least one worker during the past year?')),
                ('worker_recruitment_type', models.CharField(choices=[('Permanent', 'Permanent labor'), ('Casual', 'Casual labor')], max_length=10, verbose_name='Do you recruit workers for...')),
                ('worker_agreement_type', models.CharField(choices=[('VerbalWithoutWitness', 'Verbal agreement without witness'), ('VerbalWithWitness', 'Verbal agreement with witness'), ('WrittenWithoutWitness', 'Written agreement without witness'), ('WrittenWithWitness', 'Written contract with witness'), ('Other', 'Other')], max_length=30, verbose_name='What kind of agreement do you have with your workers?')),
                ('worker_agreement_other', models.CharField(blank=True, help_text="Provide details if 'Other' is selected.", max_length=100, verbose_name='Specify other agreement type')),
                ('tasks_clarified', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Yes or No', verbose_name='Were the tasks to be performed by the worker clarified during recruitment?')),
                ('additional_tasks', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Yes or No', verbose_name='Does the worker perform tasks for you or your family members other than those agreed upon?')),
                ('refusal_action', models.CharField(choices=[('Compromise', 'I find a compromise'), ('SalaryDeduction', 'I withdraw part of their salary'), ('Warning', 'I issue a warning'), ('Other', 'Other'), ('NotApplicable', 'Not applicable')], max_length=20, verbose_name='What do you do when a worker refuses to perform a task?')),
                ('refusal_action_other', models.CharField(blank=True, help_text="Fill this if 'Other' is selected.", max_length=100, verbose_name='Specify refusal action')),
                ('salary_status', models.CharField(choices=[('Always', 'Always'), ('Sometimes', 'Sometimes'), ('Rarely', 'Rarely'), ('Never', 'Never')], max_length=10, verbose_name='Do your workers receive their full salaries?')),
                ('recruit_1', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, verbose_name='It is acceptable for a person who cannot pay their debts to work for the creditor to reimburse the debt.')),
                ('recruit_2', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, verbose_name='It is acceptable for an employer not to reveal the true nature of the work during recruitment.')),
                ('recruit_3', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, verbose_name='A worker is obliged to work whenever he is called upon by his employer.')),
                ('conditions_1', models.CharField(choices=[('Agree', 'Agree'), ('Disagree', 'Disagree')], max_length=100, verbose_name='A worker is not entitled to move freely.')),
                ('conditions_2', models.CharField(choices=[('Agree', 'Agree'), ('Disagree', 'Disagree')], max_length=100, verbose_name='A worker must be free to communicate with his or her family and friends.')),
                ('conditions_3', models.CharField(choices=[('Agree', 'Agree'), ('Disagree', 'Disagree')], max_length=100, verbose_name='A worker is obliged to adapt to any living conditions imposed by the employer.')),
                ('conditions_4', models.CharField(choices=[('Agree', 'Agree'), ('Disagree', 'Disagree')], max_length=100, verbose_name="It is acceptable for an employer and their family to interfere in a worker's private life.")),
                ('conditions_5', models.CharField(choices=[('Agree', 'Agree'), ('Disagree', 'Disagree')], max_length=100, verbose_name='A worker should not have the freedom to leave work whenever they wish.')),
                ('leaving_1', models.CharField(choices=[('Agree', 'Agree'), ('Disagree', 'Disagree')], max_length=100, verbose_name='A worker should be required to stay longer than expected while waiting for unpaid salary.')),
                ('leaving_2', models.CharField(choices=[('Agree', 'Agree'), ('Disagree', 'Disagree')], max_length=100, verbose_name='A worker should not be able to leave their employer when they owe money to their employer.')),
                ('consent_recruitment', models.CharField(choices=[('Agree', 'Agree'), ('Disagree', 'Disagree')], max_length=100, verbose_name='It is acceptable to recruit someone for work without their consent.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('enumerator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='consent_location', to='portal.districtstafftbl')),
                ('farmer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.farmertbl')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='childinhouseholdtbl',
            name='houseHold',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='children', to='portal.householdtbl'),
        ),
        migrations.CreateModel(
            name='AdultHouseholdMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('full_name', models.CharField(help_text='Enter full name without special characters.', max_length=200, validators=[django.core.validators.RegexValidator(message='Only letters, numbers, spaces, and apostrophes are allowed. Accents are not allowed.', regex="^[0-9A-Za-z\\s\\']+$")], verbose_name='Full Name')),
                ('relationship', models.CharField(choices=[('Husband/Wife', 'Husband/Wife'), ('Son/Daughter', 'Son/Daughter'), ('Brother/Sister', 'Brother/Sister'), ('Son-in-law/Daughter-in-law', 'Son-in-law/Daughter-in-law'), ('Grandson/Granddaughter', 'Grandson/Granddaughter'), ('Niece/Nephew', 'Niece/Nephew'), ('Cousin', 'Cousin'), ("Worker's Family", "Worker's Family"), ('Worker', 'Worker'), ('Father/Mother', 'Father/Mother'), ('Other', 'Other (specify)')], max_length=50, verbose_name='Relationship to the respondent')),
                ('relationship_other', models.CharField(blank=True, help_text="If 'Other' is selected, please specify.", max_length=100, verbose_name='Specify relationship (if Other)')),
                ('gender', models.CharField(choices=[('Boy', 'Boy'), ('Girl', 'Girl')], max_length=6, verbose_name='Gender')),
                ('nationality', models.CharField(choices=[('Ghanaian', 'Ghanaian'), ('Non Ghanaian', 'Non Ghanaian')], max_length=20, verbose_name='Nationality')),
                ('country_origin', models.CharField(blank=True, choices=[('Burkina Faso', 'Burkina Faso'), ('Mali', 'Mali'), ('Guinea', 'Guinea'), ('Ivory Coast', 'Ivory Coast'), ('Liberia', 'Liberia'), ('Togo', 'Togo'), ('Benin', 'Benin'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Other', 'Other')], max_length=50, verbose_name='Country of origin (if Non Ghanaian)')),
                ('country_origin_other', models.CharField(blank=True, max_length=100, verbose_name='Specify country of origin (if Other)')),
                ('year_birth', models.IntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2025)], verbose_name='Year of birth')),
                ('birth_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does this member have a birth certificate?')),
                ('main_work', models.CharField(choices=[('Farmer_cocoa', 'Farmer (cocoa)'), ('Farmer_coffee', 'Farmer (coffee)'), ('Farmer_other', 'Farmer (other)'), ('Merchant', 'Merchant'), ('Student', 'Student'), ('Other', 'Other'), ('No_activity', 'No activity')], max_length=30, verbose_name='Main work/occupation')),
                ('main_work_other', models.CharField(blank=True, help_text="If 'Other' is selected, please specify.", max_length=100, verbose_name='Specify main work (if Other)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('houseHold', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='portal.householdtbl')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='childLightTaskTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('remuneration_received_12months', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text='Did the child receive remuneration for the activity %rostertitle%?', max_length=3)),
                ('light_duty_duration_school_12', models.CharField(choices=[('<1', 'Less than 1 hour'), ('1-2', '1-2 hour'), ('2-3', '2-3 hours'), ('3-4', '3-4 hours'), ('4-6', '4-6 hours'), ('6-8', '6-8 hours'), ('>8', 'More than 8 hours'), ('na', 'Does not apply')], help_text='Longest time spent on light duty during a SCHOOL DAY in the last 7 days.', max_length=10)),
                ('light_duty_duration_non_school_12', models.CharField(choices=[('<1', 'Less than 1 hour'), ('1-2', '1-2 hour'), ('2-3', '2-3 hours'), ('3-4', '3-4 hours'), ('4-6', '4-6 hours'), ('6-8', '6-8 hours'), ('>8', 'More than 8 hours')], help_text='Longest time spent on light duty during a NON-SCHOOL DAY in the last 7 days.', max_length=10)),
                ('task_location_12', models.CharField(choices=[('family_farm', 'On family farm'), ('hired_labour', 'As a hired labourer on another farm'), ('school_farms', 'School farms/compounds'), ('teachers_farms', 'Teachers farms (during communal labour)'), ('church_farms', 'Church farms or cleaning activities'), ('community_help', 'Helping a community member for free'), ('other', 'Other')], help_text='Where was this task done?', max_length=20)),
                ('task_location_other_12', models.CharField(blank=True, help_text="If 'Other' is selected, please specify.", max_length=200, null=True)),
                ('total_hours_light_work_school_12', models.IntegerField(help_text='Total hours spent in light work during SCHOOL DAYS in the past 7 days. Must be between 0 and 1015.')),
                ('total_hours_light_work_non_school_12', models.IntegerField(help_text='Total hours spent in light work during NON-SCHOOL DAYS in the past 7 days. Must be between 0 and 1015.')),
                ('under_supervision_12', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text='Was the child under supervision of an adult when performing this task?', max_length=3)),
                ('tasks_done_in_7days', models.CharField(blank=True, help_text='Which of the following tasks has the child done in the last 7 days on the cocoa farm? If multiple tasks apply, list the keys separated by commas.', max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.childinhouseholdtbl')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.lighttasktbl')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='childLightTask12MonthsTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('remuneration_received', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text='Did the child receive remuneration for the activity?', max_length=3)),
                ('light_duty_duration_school', models.CharField(choices=[('<1', 'Less than 1 hour'), ('1-2', '1-2 hour'), ('2-3', '2-3 hours'), ('3-4', '3-4 hours'), ('4-6', '4-6 hours'), ('6-8', '6-8 hours'), ('>8', 'More than 8 hours'), ('na', 'Does not apply')], help_text='What was the longest time spent on light duty during a SCHOOL DAY in the last 7 days?', max_length=10)),
                ('light_duty_duration_non_school', models.CharField(choices=[('<1', 'Less than 1 hour'), ('1-2', '1-2 hour'), ('2-3', '2-3 hours'), ('3-4', '3-4 hours'), ('4-6', '4-6 hours'), ('6-8', '6-8 hours'), ('>8', 'More than 8 hours')], help_text='What was the longest amount of time spent on light duty on a NON-SCHOOL DAY in the last 7 days?', max_length=10)),
                ('task_location', models.CharField(choices=[('family_farm', 'On family farm'), ('hired_labour', 'As a hired labourer on another farm'), ('school_farms', 'School farms/compounds'), ('teachers_farms', 'Teachers farms (during communal labour)'), ('church_farms', 'Church farms or cleaning activities'), ('community_help', 'Helping a community member for free'), ('other', 'Other')], help_text='Where was this task done?', max_length=20)),
                ('task_location_other', models.CharField(blank=True, help_text="If 'Other' is selected, please specify.", max_length=200, null=True)),
                ('total_hours_light_work_school', models.IntegerField(help_text='How many hours in total did the child spend in light work during SCHOOL DAYS in the past 7 days?')),
                ('total_hours_light_work_non_school', models.IntegerField(help_text='How many hours in total did the child spend on light duty during NON-SCHOOL DAYS in the past 7 days?')),
                ('under_supervision', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text='Was the child under supervision of an adult when performing this task?', max_length=3)),
                ('performed_tasks_12months', multiselectfield.db.fields.MultiSelectField(blank=True, help_text='Which of these tasks has child %rostertitle% performed in the last 12 months? If multiple tasks, separate their keys using commas.', max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.childinhouseholdtbl')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.lighttasktbl')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='pciTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('access_to_protected_water', models.DecimalField(decimal_places=2, help_text='Do most households in this community have access to a protected water source?', max_digits=10)),
                ('hire_adult_labourers', models.DecimalField(decimal_places=2, help_text='Do some households in this community hire adult labourers to do agricultural work?', max_digits=10)),
                ('awareness_raising_session', models.DecimalField(decimal_places=2, help_text='Has at least one awareness-raising session on child labour taken place in the community in the past year?', max_digits=10)),
                ('women_leaders', models.DecimalField(decimal_places=2, help_text='Are there any women among the leaders of this community?', max_digits=10)),
                ('pre_school', models.DecimalField(decimal_places=2, help_text='Is there at least one pre-school in this community?', max_digits=10)),
                ('primary_school', models.DecimalField(decimal_places=2, help_text='Is there at least one primary school in this community?', max_digits=10)),
                ('separate_toilets', models.DecimalField(decimal_places=2, help_text='Are there separate toilets for boys and girls in the primary school(s) of the community?', max_digits=10)),
                ('provide_food', models.DecimalField(decimal_places=2, help_text='Do(es) the primary school(s) provide food?', max_digits=10)),
                ('scholarships', models.DecimalField(decimal_places=2, help_text='Do some children in the community access scholarships to attend high school?', max_digits=10)),
                ('corporal_punishment', models.DecimalField(decimal_places=2, help_text='Is there an absence of corporal punishment in the primary school(s)?', max_digits=10)),
                ('total_index', models.DecimalField(decimal_places=2, help_text='Total Index', max_digits=10)),
                ('status', models.CharField(choices=[('high_risk', 'High Risk'), ('modium_risk', 'Medium Risk'), ('low_risk', 'Low Risk')], default='low_risk', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('enumerator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='portal.districtstafftbl')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='districttbl',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.regiontbl'),
        ),
        migrations.CreateModel(
            name='schhoolTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('name', models.CharField(max_length=100)),
                ('separate_toilet', models.CharField(help_text='Are there separate toilets for boys and girls in the primary school(s) of the community?', max_length=3)),
                ('food_provided', models.CharField(help_text='Do(es) the primary school(s) provide food?', max_length=3)),
                ('corporal_punishment', models.CharField(help_text='Is there an absence of corporal punishment in the primary school(s)?', max_length=3)),
                ('pci', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='portal.pcitbl')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='societyTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('society', models.CharField(blank=True, max_length=250, null=True)),
                ('society_code', models.CharField(blank=True, max_length=250, null=True)),
                ('society_pre_code', models.CharField(blank=True, max_length=250, null=True)),
                ('new_society_pre_code', models.CharField(blank=True, max_length=250, null=True, unique=True)),
                ('districtTbl_foreignkey', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.districttbl')),
            ],
            options={
                'verbose_name_plural': 'Society',
            },
        ),
        migrations.AddField(
            model_name='pcitbl',
            name='society',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='portal.societytbl'),
        ),
        migrations.AddField(
            model_name='farmertbl',
            name='society_name',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.societytbl'),
        ),
        migrations.CreateModel(
            name='staffTbl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now=True)),
                ('delete_field', models.CharField(default='no', max_length=10)),
                ('first_name', models.CharField(max_length=250)),
                ('last_name', models.CharField(max_length=250)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=250)),
                ('contact', models.CharField(max_length=250)),
                ('email_address', models.EmailField(blank=True, max_length=250)),
                ('uid', models.CharField(blank=True, max_length=2500, null=True)),
                ('fbase_code', models.CharField(blank=True, max_length=2500, null=True)),
                ('district', models.CharField(blank=True, max_length=250, null=True)),
                ('staffid', models.CharField(blank=True, max_length=250, null=True, unique=True)),
                ('cmpassword', models.CharField(default='P@ssw0rd24', max_length=250)),
                ('designation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Staff Details',
            },
        ),
        migrations.AddField(
            model_name='farmertbl',
            name='staffTbl_foreignkey',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.stafftbl'),
        ),
        migrations.AddField(
            model_name='districtstafftbl',
            name='staffTbl_foreignkey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.stafftbl'),
        ),
    ]
